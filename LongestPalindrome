Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). Palindrome string: A string that reads the same backward. More formally, S is a palindrome if reverse(S) = S. In case of conflict, return the substring which occurs first ( with the least starting index).

Example 1:

Input:
S = "aaaabbaa"
Output: aabbaa
Explanation: The longest Palindromic
substring is "aabbaa".
Example 2:

Input: 
S = "abc"
Output: a
Explanation: "a", "b" and "c" are the 
longest palindromes with same length.
The result is the one with the least
starting index.


Solution:

class Solution{
    static boolean palindrome(String S){
        for(int i=0;i<S.length()/2;i++){
            if(S.charAt(i)!=S.charAt(S.length()-i-1)){
                return false;
            }
        }
        return true;
    }
    static String longestPalin(String S){
        
        for(int i=0;i<S.length();i++){
            int start =0;
            int end=S.length()-i;
            for(int j=0;j<=i;j++){
                String t=S.substring(start,end);
                if(palindrome(t)){
                    return t;
                }
                start++;
            end++;
                
            }
            
        }
        
        return "0";
    }
}
